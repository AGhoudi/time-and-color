{"version":3,"sources":["serviceWorker.js","components/Timer/Timer.tsx","functions/getRandomNumber.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","textColor","borderColor","Timer","props","currentTime","Date","toLocaleTimeString","setInterval","setState","this","randomNumber","Math","floor","random","Fragment","className","style","color","textShadow","React","Component","App","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iQAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,gCC1F3DC,G,MAAW,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGEC,EAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA8CWC,E,kDAvCX,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IACDX,MAAQ,CACTY,aAAa,IAAIC,MAAOC,sBAHT,E,qDAOvB,WAA0B,IAAD,OACrBC,aAAY,WACV,EAAKC,SAAiB,CACpBJ,aAAc,IAAIC,MAAOC,yBAE1B,O,oBAGP,WACI,IAAQF,EAAgBK,KAAKjB,MAArBY,YACFM,ECxBLC,KAAKC,MAAsB,GAAhBD,KAAKE,UD0BjB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,SACX,4BACI,0BACAA,UAAU,SACVC,MAAO,CACHC,MAAM,GAAD,OAAKjB,EAAUU,IACpBQ,WAAW,YAAD,OAAcjB,EAAYS,GAA1B,sBAAqDT,EAAYS,GAAjE,sBAA4FT,EAAYS,GAAxG,uBAAoIT,EAAYS,GAAhJ,uBAA4KT,EAAYS,GAAxL,uBAAoNT,EAAYS,GAAhO,uBAA4PT,EAAYS,GAAxQ,wBAAqST,EAAYS,MAG1TN,U,GAlCTe,IAAMC,WElBXC,G,kKAXb,WACE,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,Y,GALQI,IAAMC,Y,MCGxBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJSnB,SAAkB5C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4C,IAAIC,kBAAwBpD,OAAOC,SAASoD,MACpDC,SAAWtD,OAAOC,SAASqD,OAIvC,OAGFtD,OAAOuD,iBAAiB,QAAQ,WAC9B,IAAMlD,EAAK,UAAM+C,kBAAN,sBAEPtD,IAgEV,SAAiCO,EAAOC,GAEtCkD,MAAMnD,EAAO,CACXoD,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAgD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvD,UAAUC,cAAcuD,MAAMrD,MAAK,SAAAC,GACjCA,EAAaqD,aAAatD,MAAK,WAC7BV,OAAOC,SAASgE,eAKpB7D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA+C,CAAwB7D,EAAOC,GAI/BC,UAAUC,cAAcuD,MAAMrD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OI/B/BE,K","file":"static/js/main.47d10466.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { getRandomNumber } from '../../functions/getRandomNumber';\r\n\r\n\r\nimport './Timer.scss';\r\n\r\nconst textColor =[\r\n    '#ffd9e2',\r\n    '#fbffd9',\r\n    '#ffe5d9',\r\n    '#ddffd9',\r\n    '#d9fff7', \r\n    '#d9f1ff', \r\n    '#d9ddff', \r\n    '#e8d9ff', \r\n    '#f7d9ff', \r\n    '#fed9ff', \r\n    '#ffd9f2', \r\n    '#ffd9de'\r\n];\r\n\r\nconst borderColor = [\r\n    '#ff003c',\r\n    '#fffb00',\r\n    '#ffae00',\r\n    '#51ff00',\r\n    '#00ffd5', \r\n    '#00ccff', \r\n    '#0059ff', \r\n    '#5900ff', \r\n    '#b700ff', \r\n    '#f700ff', \r\n    '#ff009d', \r\n    '#ff002b'\r\n];\r\n\r\nclass Timer extends React.Component<any, any>  {\r\n\r\n    \r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {\r\n            currentTime: new Date().toLocaleTimeString()\r\n        }        \r\n    }\r\n\r\n    componentDidMount():void {\r\n        setInterval(():void => {\r\n          this.setState<string>({\r\n            currentTime : new Date().toLocaleTimeString()\r\n          })\r\n        }, 1000)\r\n    }\r\n    \r\n    render() {\r\n        const { currentTime } = this.state;\r\n        const randomNumber = getRandomNumber();\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"clock\">\r\n                    <h1>    \r\n                        <span \r\n                        className=\"webdev\" \r\n                        style={{\r\n                            color: `${textColor[randomNumber]}`,\r\n                            textShadow: `0 0 10px ${borderColor[randomNumber]}, 0 0 20px ${borderColor[randomNumber]}, 0 0 40px ${borderColor[randomNumber]}, 0 0 100px ${borderColor[randomNumber]}, 0 0 200px ${borderColor[randomNumber]}, 0 0 300px ${borderColor[randomNumber]}, 0 0 500px ${borderColor[randomNumber]}, 0 0 1000px ${borderColor[randomNumber]}`\r\n                        }}                        \r\n                        >\r\n                            {currentTime}\r\n                        </span> \r\n                    </h1>                \r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }    \r\n}\r\n  \r\nexport default Timer;","import React from 'react';\r\n\r\nconst textColor =[\r\n  '#ffd9e2',\r\n  '#fbffd9',\r\n  '#ffe5d9',\r\n  '#ddffd9',\r\n  '#d9fff7', \r\n  '#d9f1ff', \r\n  '#d9ddff', \r\n  '#e8d9ff', \r\n  '#f7d9ff', \r\n  '#fed9ff', \r\n  '#ffd9f2', \r\n  '#ffd9de'\r\n];\r\n\r\nconst borderColor = [\r\n  '#ff003c',\r\n  '#fffb00',\r\n  '#ffae00',\r\n  '#51ff00',\r\n  '#00ffd5', \r\n  '#00ccff', \r\n  '#0059ff', \r\n  '#5900ff', \r\n  '#b700ff', \r\n  '#f700ff', \r\n  '#ff009d', \r\n  '#ff002b'\r\n];\r\n\r\nexport const getRandomNumber = () => {\r\n  return Math.floor(Math.random() * 11);\r\n}\r\n\r\nconst Color = ():void => {\r\n \r\n  \r\n   \r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport Timer from './components/Timer/Timer';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component<any, any>  {\r\n  render(): JSX.Element {      \r\n    return (\r\n      <div className=\"App\">      \r\n        <div className=\"timer\">      \r\n          <Timer />\r\n        </div>      \r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}